[["index.html", "Introduction to R for Mass Spectrometrists Preface", " Introduction to R for Mass Spectrometrists Jeff Jones, Heath Patterson, Ryan Benz 2023-03-24 Preface Who The Authors Jeff Jones (PhD) Heath Patterson (PhD) Ryan Benz (PhD) The Audience The topics covered in this book are detailed towards an absolute beginner in R and possibly to programming in general. They are intended to have little to no surprises, and taken from begging to end, one should be able to extend their towards developing analytically processes for their own research, providing means for others to accomplish analyses and begin to extend their skills with more advanced literature. This book is meant for individuals with no previous knowledge of R, although some experience with data and statistical analysis is recommended. Reading and understanding the chapters and exercises should impart the skills for basic data analysis and prepared you for more advanced concepts and skills. What Covered Goals for the Short Course - Learn basic fundamentals of the R programming language - Learn how to use to the RStudio integrated development environment (IDE) - Learn about tidy data, what it is, and why it’s important for data analysis - Learn basic fundamentals of the tidyverse ecosystem of R packages and how they can be used to streamline the data analysis process - Learn how to make data visualizations using the ggplot2 R package At the end of the course, are you able to. - start-up RStudio and make an RStudio project? - read a formatted text file (e.g. csv file) into R? - understand basic properties about the data (e.g. # rows, cols)? - tell someone what tidy data is and why it’s important? - perform some basic data manipulations and operations on the data? - make a simple plot from the data? Not Covered Not covered are the topics of statistical analysis, probability, regression, machine learning or any other advanced analytical topic. Additionally, this book does not cover constructing R packages, documentation, markdown or any other advanced R programming topic. Why This book serves as the basis for the Introduction to R course offered at the annual conference for the American Society for Mass Spectrometry (ASMS), and was developed by the authors out of the need to create a more permanent, expandable and revisable reference document. When Started in 2017 as a series of workshops at the annual ASMS conference drawing between 200 and 300 attendees for three consecutive years. The presenters were offered a formal short course starting in 2020 (a remote COVID year). In 2023 it was decided to convert all the teaching materials into a formal book. Where Online You can find the online version here [link]. In Print You can find a print version at XYZ-Press [link]. In-Person This book and it’s contents are covered at the annual American Society for Mass Spectrometry (ASMS), typically the first week in June the weekend prior to the scientific meeting. How Persistence, sweat, tears, and bookdown, of’course. "],["acknowledgements.html", "Acknowledgements", " Acknowledgements A special thanks to the American Society of Mass Spectrometry for allowing us to provide an annual basic R introductory course. "],["introduction-to-r.html", "Chapter 1 Introduction to R Why choose it? What you can do with it The R Learning Curve Thoughts about learning R and how to code Alternatives", " Chapter 1 Introduction to R Before we get started, this book contains some basic cues to help facilitate your understanding of the current topic. We small notes and tips as a block quote, see below. At the beginning of each chapter there is a section on what you should be able to accomplish at the end. At the end of each chapter there are some exercises that extend what has been covered. At the end of this chapter you should be able to: understand why R is a good choice for data analysis understand that you have just started the learning curve and all your efforts hence forth are worth it Why choose it? R is a great language for data analysis! - Many programming languages are general purpose (can be used in any domain), e.g. C/C++, Java, Python - R is not a general purpose programming language, it’s a language specifically designed for working with data (that’s what scientists do!) - Because R is geared toward data, its design, structure and continued development is focused on making it easier to work with data - R has become one of the top languages for data science, and it’s popularity and usage continues to grow - For scientists, R is a great tool to learn Fast, nimble, forgiving Lots of specialty tools (CRAN, Github, Bioconductor) What you can do with it Read and plot data construct analysis pipelines prototype new algorithms write packages to share The R Learning Curve The learning curve for R 10+ years ago was difficult as there where fewer R resources, it was less mature with not a lot of interest. Additionally, there were fewer people in the community and data science wasn’t “a thing” yet. Figure 1.1: R learning curve past The R programming language is still challenging but worth it. With the introduction of packages encompassed in the tidyverse there are more high-quality resources, mature utilization with well documented explanations and examples. Currently there is lots of current interest in R with a large community of users and developers. Additionally, the data science “revolution has pushed R to develop and evolve, become more user-centric. Figure 1.2: R learning curve present Thoughts about learning R and how to code The first step to learning a programming language is to learn its syntax (the set of rules and symbols that make up structurally correct code). Computers are really picky, and even the smallest violations of the syntax rules will result in code that doesn’t run (typos, incorrect names, missing spaces or too many spaces, wrong brackets, …). Syntax errors are frustrating, and unfortunately, the most common mistake for beginners. Hang in there, start simple, try to understand very simple cases first, then build and expand on them Alternatives Scripting: Python, Julia, Matlab Python is a great language, and is another top language for data science If you want to become a data scientist or work heavily with data, learning both R and Python is a great idea – both have pros and cons But, if you choose Python over R, that’s not a bad choice either R might work better for some, Python for others If R just isn’t working for you, give Python a shot Complied: C, C++, Java, Rust, etc. Did you know R can use functions from Python, C and Rust "],["installation.html", "Chapter 2 Installation 2.1 R interpreter 2.2 Rstudio 2.3 Packages", " Chapter 2 Installation In the scope of this book, there are three main components that need to be installed, and periodically updated: The R interpreter - the software that understands math and plotting RStudio IDE - the software that makes it easy write code and visualize data R Packages - bits of R code that perform specalized operations In this book we will be utilizing the RStudio integrated development environment (IDE) to interact with R. Two separate components are required for this - the R interpreter and the RStudio IDE. Both are required as the RStudio IDE only provides an interface for the R interpreter, which reads the code and does all the mathematical operations. The R interpreter can be used alone, interacting through the command line (eg. Windows CMD, MacOS and Linux Terminal), a plain text editor or another IDE such as Xcode, VSCode, Eclipse, Notepad++, etc. Rstudio provides a comprehensive, R specific environment, with auto-complete, code syntax highlighting, in-editor function definitions along with package management and plot visualizations. 2.1 R interpreter The underlying “engine” for R programming language can be downloaded from The R Project for Statistical Computing. R is an open-source implementation of the S statistical computing language originally developed at Bell Laboratories. Both langauges contain a variety of statistical and graphical techniques, however, R has been continually extended by professional, academic and amateur contributors and remains the most active today. With the advent of open-source sharing platforms such as GitHub, R has become increasingly popular among data scientists because of its ease of use and flexibility in handling complex analyses on large datasets. Additionally, one of R’s strengths is the ease with which well-designed publication-quality plots can be produced. Steps Navigate to The R Project Click on CRAN under Download, left-hand side Click on https://cloud.r-project.org/ under 0-Cloud This will take you to the globally nearest up-to-date repository Click on Download for ... and choose the OS compatible with your device Windows OS Click on base MacOS For an Intel CPU: click R-4.x.x.pgk to download For an M1 CPU: click R-4.x.x-arm64.pkg to download After downloading, double-click the installer and follow the instructions Figure 2.1: Mac Installer Linux Click on your distribution and follow the instructions provided. Most of these instructions require knowledge of the Terminal and command line interface for *unix systems. 2.2 Rstudio RStudio, prior to 2023, was an independent software provider for the ever-popular RStudio products, which included both the desktop and server based IDEs, along with the RShiny applications and servers that facilitate easy-to-build interactive web applications straight from R, and deployed on the web. The last chapter in this book will explore the tidyproteomics package which also has a Shiny web application. RStudio announced at the beginning of 2023 a soft pivot to Posit, which essentially is a rebranding of the RStudio company to encompass a larger data science audience, one that also provides integration with the Python programming language inside the RStudio IDE. The most trusted IDE for open source data science “RStudio is an integrated development environment (IDE) for R and Python. It includes a console, syntax-highlighting editor that supports direct code execution, and tools for plotting, history, debugging, and workspace management. RStudio is available in open source and commercial editions and runs on the desktop (Windows, Mac, and Linux).” — www.posit.co (Jan 2023) Steps Navigate to posit.co, alternatively rstudio.com redirects to the Posit website. Click Download RStudio in the menu top right Select RStudio Desktop Click Download RStudio skip 1: Install R Click Download RStudio Desktop for .. Windows OS MacOS Opening the .dmg file shows the archive that can be copied into the Applications folder simply by click-dragging the application onto the Applications folder shortcut. Figure 2.2: RStudio IDE Install Linux 2.2.1 IDE Layout The RStudio IDE consists of 4 individual panes each containing parts of the total environment, making it more manageable. For instance, having the text editor and console open and organized while creating and viewing a plot is delightfully easier than having three separate applications open on a desktop. Figure 2.3: RStudio IDE in the default layout The Editor Tabs: All Open Files Basically a text editor, but with the knowledge of R. The Editor automatically colors parts of the text based on what it is. Notice in the image below, comments (starting with a hash #) are a light green, operators (+ and the assignment operator &lt;-) are a light blue, variables (2 and four) are black and quoted text (called strings) are purple. Figure 2.4: RStudio IDE syntax highlighting The Editor also has the ability to know what is available to use, such as variables and functions. In the image below, the editor has suggested that I might want to use the mean() function for calculating the average of a collection of values and provided a pop up which is selectable - there is even a popup description to accompany it. This occurs after typing in the first three letters of anything, the editor will try to guess what you want next. Figure 2.5: RStudio IDE auto complete Files and Plots Tabs: Files Plots Packages Viewer Presentation The script that is open in the editor has been saved to the current project, and is visable in the Files tab on the top right. Opening another file will open another tab in the Editor, allowing you to switch between open files. Also located in this pane is the Plots tab where any active plots can be viewed instantly. This is where RStudio begins to shine, with the ability to bring together editing and visualization all in one application. Figure 2.6: RStudio IDE plot window The Console Tabs: Console Terminal, Background Jobs This is where lines of code will be run from the editor You can also run code here Also gives access to the computer’s terminal Environment Tabs: Environment History Connections Tutorial 2.2.2 Usage .. Running lines of code in RStudio 2.2.2.1 Run from the editor (recommended) Type in the code in the Editor (top-left pane) Put editor cursor anywhere on that line Press Ctrl/CMD+Enter. Multiple lines: highlight multiple lines then press Ctrl/CMD+Enter #### Run from the onsole (occasionally) Type code into Console (bottom-left) after the ‘&gt;’ Press Enter. Multiple lines, not advised, but copy and paste multiple lines into console then press Enter. 2.3 Packages 2.3.1 What are R Packages? R packages wrap-up code written by others so you can use it in your own projects Most R packages provide new functions to deal with specific problems, e.g. ggplot2: helps you make plots mzR: read mass spectrometry data files twitteR: access twitter data Packages can be written by anyone, and quality can vary widely There are lots of high quality packages, but also be wary of random packages you come across on the internet 2.3.2 Where to get R packages CRAN (Comprehensive R Archive Network) Main (and default) repository for R packages Maintainers review packages for basic structure and utility before they are approved (is the package structured properly? can it build and load without problems?) Don’t assume that just because a package is on CRAN that is “does the right/correct thing” Bioconductor Alternative R package repository for bioinformatics related packages Lots of MS related packages Uses a different installation procedure than CRAN GitHub Anyone can host an R package from GitHub – this is a Pro and a Con Faster way to get your code out to others (no review or submission process) Newer package versions are often on GitHub before they make it to CRAN 2.3.3 Notes on RTools and Command Line Tools Most R packages have binary versions that can be directly installed with no additional steps If binary versions are not available (e.g. the package is new or just been updated), it may need to be compiled before it can be installed RTools (Windows) and Command Line Tools (Mac) provide the necessary programs and libraries you’ll need to compile packages But… package compilation sometimes doesn’t work (for a variety of reasons) and can be frustrating! In general, stick with using binary packages 2.3.4 tidyverse - Needed for this book tibble readr dplyr tidyr purrr stringr ggplot2 "],["the-basics.html", "Chapter 3 The Basics 3.1 Syntax 3.2 Flow-Control 3.3 Projects", " Chapter 3 The Basics Welcome to the R Book! In this chapter, we will explore the basics of R, a powerful programming language used for statistical computing and graphics. At its most fundamental level, R is a calculator capable of performing simple, and complex, mathematical operations. It can read and write data to and from files, manipulate the data, calculate summaries and plot visual representations of the data. Essentially, it is a programmatic version of a spreadsheet program. However, R is much more than just a calculator. It is also a platform for conducting complex analyses, statistical evaluations, predictive inferencing, and machine learning. With R, you can explore and visualize data in a variety of ways, perform advanced statistical analyses, and build predictive models. In this chapter, we will start by examining the simplest operations of R. We will cover basic arithmetic, working with variables, and creating basic plots. By the end of this chapter, you will have a solid understanding of the fundamentals of R and be ready to tackle more complex topics. So, let’s get started! At the end of this chapter you should be able to: understand R’s syntax, variables, operators and functions create and edit a project in RStudio 3.0.1 Reserved Words As we begin our journey, it’s important to keep in mind that there are certain reserved words that carry a special meaning and cannot be used as identifiers. These words have been set aside by the R programming language, and using them as variable names or function names could lead to errors in your code. Therefore, before we dive too deeply into our R programming endeavors, let’s take a moment to familiarize ourselves with these reserved words. This will help us avoid potential issues down the road and ensure that our code runs smoothly. # to read more about them type ?reserved Word Use if, else flow control, part of the if-then-else statement for, repeat, while, break, next flow control, part of the for-loop statement function basis for defining new algorithms TRUE, FALSE Boolean logic values NULL an undefined value Inf , -Inf an infinite value (eg. 1/0 ) NaN ‘not a number’ NA a missing value indicator NOTE: a Null results when a value is missing and could be a string or a numeric, where as a NA results when a known value, such as in a column of numbers, is missing. 3.1 Syntax Welcome to the R Book! In this section, we will discuss the different components of R code that you should be familiar with. R input is composed of typing characters to represent various parts of a process or mathematical operation. These characters come together to form what we call R code. Understanding the different components of R code is essential to writing effective and efficient R programs. Below are some examples of the different components of R code: Comments Variables Operators Numerics Strings Functions Comments are used to add notes or explanations to your code. Variables are used to store data values that can be used later on in your program. Operators are used to perform mathematical operations, such as addition or subtraction. Numerics are values that represent numerical data, such as integers or decimals. Strings are values that represent text data. Functions are pre-defined sets of instructions that can be called upon to perform specific tasks in your program. By understanding these different components of R code, you will be able to write more effective and efficient R programs. NOTE: this is a code block, you can copy the code here and paste into RStudio # adding two numbers here and storing it as a variable four &lt;- 2 + 2 # using the function &#39;cat&#39; to print out my variable along with some text cat(&quot;my number is &quot;, four) ## my number is 4 NOTE: the ## at the beginning of the output is only present in the book, you will not see it in your interactions 3.1.1 Comments Comments are essential parts of the code you will write. They help explain why you are taking a certain approach to the problem, either for you to remember at a later time or for a colleague. Comments in other coding languages, including R package development, can become quite expressive, representing parts and structures to a larger documentation effort. Here, however, comments are just simple text that gets ignored by the R interpreter. You can put anything you want in comments. oops, not a comment # This is a comment # and here a comment tag is used to ignore legitimate R code # four &lt;- 2 + 2 four &lt;- 2 * 2 3.1.2 Numbers (integers and floats) Numbers are the foundation upon which all data analysis is built. Without numbers, we would not be able to perform calculations, identify patterns, or draw conclusions from our data. In the programming language R, there are two main types of numbers: integers and floats. An integer is a whole number with no decimal places, while a float is a number with decimal places. Understanding the difference between these two types of numbers is essential for accurate numerical analysis. In R, integers are represented as whole numbers, such as 1, 2, 3, and so on, while floats are represented with a decimal point, such as 1.5, 2.75, and so on. It is important to note that integers occupy less space in memory than floats, which can be a consideration when working with large datasets. This means that when possible, it is generally better to use integers over floats in R, as they are more efficient and can improve the overall performance of your code. # integers 1, 12345, -17, 0 A float is a real number with a fractional component, represented as a decimal value. The name “float” comes from the way computers do math. In computing, a floating-point number can be represented using an integer with a fixed precision, called the significand, scaled by an integer exponent of a fixed base, such as 10. For example, 12.345 can be represented as a base-ten floating-point number. Additionally, it’s important to be aware of potential errors when working with floats. Due to the way floats are represented in binary, certain decimal numbers cannot be accurately represented. This can result in rounding errors and unexpected behavior in your code. Therefore, it’s important to use caution when comparing floats, which is outside the scope of this book. For more information consider using packages, such as decimal or Rmpfr, that provide precise floating-point arithmetic. # floats significand &lt;- 12345 exponent &lt;- -3 base &lt;- 10 # 12.345 = 12345 * 10^-3 significand * base ^ exponent 3.1.3 Operators In programming, operators are essential components that allow us to manipulate various data types. Operators are symbols that perform a specific action on one or more operands. The operands could be numeric values, variables, or even strings. These symbols allow us to add, subtract, multiply, and divide numeric values, as well as perform more complex mathematical operations such as exponentiation and modulus. In addition to numeric values, operators can also manipulate string variables. For example, we can use concatenation operators to join two or more strings together. By using operators, we can perform powerful operations that allow us to build complex programs and applications. NOTE: Remember order of operations (PEMDAS): Parentheses, Exponents, Multiplication and Division (from left to right), Addition and Subtraction (from left to right). At their very basic, operators allow you to perform calculations .. 1 + 2 ## [1] 3 1 / 2 ## [1] 0.5 .. assign values to string variables .. myvar &lt;- 1 .. and compare values. 1 == myvar ## [1] TRUE 2 != myvar + myvar ## [1] FALSE Here is a table summarizing of some common operators in R. Operator Description Example &lt;- assigns numerics and functions to variables x &lt;- 1 x now has the value of 1 + adds two numbers 1 + 2 = 3 - subtracts two numbers 1 - 2 = -1 * multiplies two numbers 1 * 2 = 2 / divides two numbers 1 / 2 = 0.5 ^ raises one number to the power of the other 1 ^ 2 = 1 = also an assignment operator x = 1 x now has the value of 1 == performs a comparison (exactly equal) 1 == 1 = TRUE != performs a negative comparison (not equal) 1 != 2 = TRUE 3.1.4 Variables Variables are “things” (letters, words, text strings) that can hold information that can vary. In one instance it can hold a number and in another it can hold text. We can use variables to hold all kinds of information and then refer to that variable again and again to retrieve that information, manipulate it with an operation or replace it with an assignment. # create two viables and assign values to each var_a &lt;- 1 var_b &lt;- 3.14 var_a + var_b ## [1] 4.14 R even has some intrinsic variables that come in handy, like pi. pi ## [1] 3.141593 NOTE: in R it is easy to overwrite existing variables, causing error and confusion pi &lt;- 9.87 pi ## [1] 9.87 3.1.5 Statements Using a comparison operator, you can make logical comparisons called statements. Operator Description Example | an either or comparison, TRUE if both are true FALSE if one is false. 1 == 1 | 1 != 2 = TRUE 1 == 1 | 1 == 2 = FALSE &amp; a comparison where both must be TRUE 1 == 1 &amp; 1 != 2 = TRUE 1 == 1 &amp; 1 != 2 = FALSE NOTE: there are also the double operators || and &amp;&amp;, these are intended to work as flow control operators and stop at the first condition met. In the most recent versions of R, the double operators will error out if a vector is applied. 3.1.6 Functions In programming, a function is a type of operator that performs a specific task and can accept additional information or parameters. In fact, all operators are functions in a sense, as they take inputs and produce outputs. The R programming language has a special class of operators called “binary infix” operators. Infix means “in between,” and these operators are placed in between two inputs. These operators have a unique syntax that may confuse beginners, but they are essential for more complex operations in R. Now, you may wonder why we are discussing these esoteric aspects of R in a beginner’s book. The reason is that understanding these unique features of the language can give you a better understanding of what the R programming language is doing, how it is structured, and how you can relate to it. It is important to have a solid foundation in the basics of any language, but gaining a deeper understanding of its more complex elements can help you become a more proficient programmer. So, while binary infix operators may seem like an advanced topic, they are an essential part of the R language and can help you unlock its full potential. 1 + 2 # as an infix operator ## [1] 3 `+`(1,2) # as the function ## [1] 3 sum(1,2) # same result just using a named function ## [1] 3 sum(1,2,3,4,5) # this function however can take in more than 2 values ## [1] 15 We can even create a user defined infix operator … `%zyx%` &lt;- function(a,b) { a + b } 1 %zyx% 2 ## [1] 3 … or just a normal function. zyx &lt;- function(a,b) { a + b } zyx(1,2) ## [1] 3 The notion of an infix operator you and ignore for the most part. But, we will see it again when diving into the tidyverse - a collection of arguably the most powerful data manipulation packages you will encounter. For now, lets move on with more about functions(). 3.2 Flow-Control 3.2.1 If-Else Statements 3.2.2 Loops 3.2.2.1 For 3.2.2.2 While 3.3 Projects Project are how RStudio organizes your work. Think of project as singular goal oriented collection. There are no rules but some basic organizational tips should help simplify your project. 3.3.1 Creating Creating a new project is very forgiving, you can create a new directory with a project name, or create a project out of an existing directory. Either 1. Click on the drop down in the top right 2. OR: Under the menu item select File &gt; New Project In the New Project Wizard select New Directory &gt; New Project, enter the name of the project and click Create Project. Figure 3.1: RStudio Create New Project 3.3.2 Editing 3.3.3 Organizing 3.3.3.1 Data 3.3.3.2 Scripts 3.3.3.3 Results 3.3.3.3.1 Tables 3.3.3.3.2 Plots "],["data-structures.html", "Chapter 4 Data Structures 4.1 Variable", " Chapter 4 Data Structures 4.1 Variable –&gt; (05 break, assignment) ## Vector –&gt; (06 break, assignment) ## Matrix ## Data Frame –&gt; (07 break, assignment) ## List "],["data-tables.html", "Chapter 5 Data Tables 5.1 Tidy Data 5.2 Tibble, a new Data Structure", " Chapter 5 Data Tables 5.1 Tidy Data 5.2 Tibble, a new Data Structure –&gt; (08 break, assignment) ## Reading Data into R ## Summarization –&gt; (09 break, assignment) ## Data Manipulation ### dplyr ### tidyr –&gt; (10 break, assignment) "],["data-visualization.html", "Chapter 6 Data Visualization 6.1 GGPlot", " Chapter 6 Data Visualization 6.1 GGPlot 6.1.1 Syntax 6.1.2 Points and Lines –&gt; (11 break, assignment) ### Bar and histograms –&gt; (12 break, assignment) ## Extended Syntax ### Colors, Scales and Faceting ### Labels and Annotations –&gt; (13 break, assignment) #### Install Package ggrepel –&gt; (14 break, assignment) "],["mass-spectrometry-data.html", "Chapter 7 Mass Spectrometry Data 7.1 Commercial 7.2 Open Access", " Chapter 7 Mass Spectrometry Data 7.1 Commercial 7.1.1 RAW (Thermo) 7.1.2 WIFF (Sciex) 7.1.3 D (Agilent) 7.2 Open Access 7.2.1 mzXML (HUPO) 7.2.2 mzML (HUPO - most common) 7.2.3 mzH5 (HDF5) 7.2.4 MGF (Mascot, Comet) 7.2.5 PIN (Comet) "],["mass-spectrometry-r-packages.html", "Chapter 8 Mass Spectrometry R Packages 8.1 xcms 8.2 msStats 8.3 MALDIquant 8.4 tidyproteomics", " Chapter 8 Mass Spectrometry R Packages 8.1 xcms 8.2 msStats 8.3 MALDIquant 8.4 tidyproteomics "]]
